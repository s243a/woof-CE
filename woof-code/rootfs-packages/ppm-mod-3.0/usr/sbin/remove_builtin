#!/bin/sh
#Barry Kauler Dec. 2010, license GPL v3 /usr/share/doc/legal.
#based on a script by technosaurus, Dec. 2010.
#101222 fix menu.
#101227 technosaurus: fixed reverse dependency check.
#110505 support sudo for non-root user.
#120202 rodin.s: internationalized.
#120329 Xdialog bug --yesno supposed to "yes" "No" buttons, but they are "OK" "Cancel".
#140622 rg66: fix for removed packages showing as installed in ppm

[ "`whoami`" != "root" ] && exec sudo -A ${0} ${@} #110505

GTKVERLIST='1.0 2.0 3.0'

export TEXTDOMAIN=remove_builtin
export TEXTDOMAINDIR=/usr/share/locale
export OUTPUT_CHARSET=UTF-8
eval_gettext () {
  local myMESSAGE=$(gettext "$1")
  eval echo \"$myMESSAGE\"
}
export LANGORG=$LANG

Yes_lbl="$(gettext 'Yes')"
No_lbl="$(gettext 'No')"

MSG1="`gettext \"Simple utility to 'delete' packages that are builtin\nto the read-only .sfs file (Squashfs filesystem)\"`"

#!/bin/sh
D=$HOME/.packages/builtin_files

while [ 1 ];do
 FIXMENU='no' #101222
 PKGS=`ls -1 $D`
 PKG=`Xdialog --left --screen-center --backtitle "${MSG1}" --title "$(gettext 'Remove builtin packages')" --stdout --help "$(gettext "In all modes of running Puppy, other than a full hard-drive installation,\n
all of the Puppy files are in a compressed read-only file named 'puppy.sfs'\n
or 'wary_500.sfs' (or some similar name). So you can't actually delete these\n
files. However, if you want to remaster the live-CD to create your own custom\n
Puppy (see Setup menu), you can use this little program to 'pretend' to delete\n
them -- and they will really be gone in the remastered CD. So, for example if\n
you remove SeaMonkey, it will be gone in the remastered CD thus reducing the\n
size of the .iso live-CD file.\n\n
Technical note: the lists of builtin files is at /root/.packages/builtin_files,\n
        the list of builtin pkgs is in /root/.packages/woof-installed-packages.")" --combobox "$(gettext 'Select package to remove:')" 0 0 $PKGS`
 if [ "$PKG" ];then
  aREGEX="|${PKG}|"
  aREGEX2="${PKG}|"
  DESCR="`grep "$aREGEX" /root/.packages/woof-installed-packages |cut -d "|" -f 10`"
  Xdialog --left --screen-center --backtitle "$(gettext 'Confirm that you want to delete') '${PKG}'" --title "$(gettext 'Remove builtin packages')" --ok-label "$Yes_lbl" --cancel-label "$No_lbl" --yesno "$(gettext 'Description of package:')\n
${DESCR}\n\n
$(gettext 'For information only, these are dependencies of') '${PKG}':\n
`grep "$aREGEX" /root/.packages/woof-installed-packages |cut -d "|" -f 9 | sed -e 's%^+%%' -e 's%,+% %g'`
\n
`eval_gettext \"Warning, removing '\\\${PKG}' _may_ break the following packages:\"`\n
`grep +${PKG} /root/.packages/woof-installed-packages |cut -d "|" -f 2 |tr "\n" " "`
\n
$(gettext 'Continue?')" 0 0

retval1=$?

  if [ $retval1 -eq 0 ];then
  
   [ "`grep '\.desktop$' ${D}/${PKG}`" != "" ] && FIXMENU='yes' #101222
   
   Xdialog --left --screen-center --title "$(gettext 'Remove builtin packages')" --ok-label "$Yes_lbl" --cancel-label "$No_lbl" --yesno "$(gettext 'Do you want to create pet packages for ') '${PKG}'? \n\nThis will be useful if you want to bring back the builtin files.\nThe package will saved in /root/builtin-pkg"  0 0

   retval2=$?
   
  if [ $retval2 -eq 0 ];then 
    if [ ! -d /tmp/${PKG} ]; then
    mkdir /tmp/${PKG}
    fi
  fi
   
   /usr/lib/gtkdialog/box_splash -close never -text "Removing $PKG..." &
   xPID=$!
   
   for x in `cat $D/$PKG`
   do 
	   if [ -d $x ]; then
	   cd $x
	   else	   
		   if [ $retval2 -eq 0 ]; then
		   path1=`pwd`
		   cp --parents -rf $path1/$x /tmp/${PKG}/
		   fi
	   rm -f ./$x
	   fi
   done
   
   
   for x in `tac $D/$PKG`
   do 
   if [ -d $x ]; then
    if [ ! "`ls $x`" ]; then
    rmdir $x
    fi
   fi 
   done
   
   prechar="+"
      
   if [ $retval2 -eq 0 ]; then
   
   reg1=`cat /root/.packages/woof-installed-packages | grep "|${PKG}|" | grep -v "$prechar${PKG}"`
   reg2=`cat /root/.packages/woof-installed-packages | grep "${PKG}|" | grep -v "$prechar${PKG}"`
   
   echo "... $reg1" 
   
   if [ "$reg1" != "" ]; then
   echo "$reg1" > /tmp/${PKG}/pet.specs
   else
   echo "$reg2" > /tmp/${PKG}/pet.specs
   fi
   
   cd /tmp
   
   tar -cf "${PKG}.tar" "./${PKG}"
   gzip "./${PKG}.tar"
   tgz2pet "./${PKG}.tar.gz"
   
   if [ ! -d /root/builtin-pkg ]; then
   mkdir /root/builtin-pkg
   fi
   
   mv "/tmp/${PKG}.pet" "/root/builtin-pkg/${PKG}.pet"
   
   rm -rf /tmp/${PKG}
   
   fi
   
  
   grep -v "${PKG}" /root/.packages/woof-installed-packages > /tmp/woof-installed-packages-cut2
   grep "$prechar${PKG}" /root/.packages/woof-installed-packages >> /tmp/woof-installed-packages-cut2
   
   grep -v "${PKG}" /root/.packages/adrive-installed-packages > /tmp/adrive-installed-packages-cut2
   grep "$prechar${PKG}" /root/.packages/adrive-installed-packages >> /tmp/adrive-installed-packages-cut2
   
   sort /tmp/woof-installed-packages-cut2 > /root/.packages/woof-installed-packages
   rm -f /tmp/woof-installed-packages-cut2 
   
   sort /tmp/adrive-installed-packages-cut2 > /root/.packages/adrive-installed-packages
   rm -f /tmp/adrive-installed-packages-cut2
   
   cp -f /root/.packages/woof-installed-packages /root/.packages/layers-installed-packages
   
   #140622
   grep "yes|${PKG}|" /root/.packages/DISTRO_PKGS_SPECS | while read line; do
   NAME=`echo "|${PKG}|" | tr -d '|'`
   EXACT=`echo $line | awk -F'|' '{print $2}'`
   if [ "$NAME" = "$EXACT" ]; then
   NEW=`echo $line | sed 's/yes/no/'`
   sed -i 's/'"$line"'/'"$NEW"'/' /root/.packages/DISTRO_PKGS_SPECS
   fi
   done
   #######

	pkgfile2="${D}/${PKG}"   
	   
PKGFILE="$pkgfile2"

arch1="$(uname -m)"

case $arch1 in
i?86)
 ldpaths="lib lib32 lib/i386-linux-gnu"
;;
x86_64|amd64)
 ldpaths="lib lib64 lib/x86_64-linux-gnu lib/amd64-linux-gnu"
;;
esac

for libfld in $ldpaths
do
	if [ "`grep "^/$libfld/gio/modules/" "$PKGFILE"`" != "" ];then
	 gio-querymodules /$libfld/gio/modules
	fi
done

for pkgpath in /usr /usr/local
do
	#120523 precise puppy needs this... (refer also rc.update and 3builddistro)
	if [ "`grep "$pkgpath/share/glib-2.0/schemas" "$PKGFILE"`" != "" ];then
	 glib-compile-schemas $pkgpath/share/glib-2.0/schemas
	fi

	if [ "`grep "$pkgpath/share/mime" "$PKGFILE"`" != "" ];then
	 update-mime-database $pkgpath/share/mime
	fi

	if [ "`grep "$pkgpath/share/icons/hicolor" "$PKGFILE"`" != "" ];then
	 gtk-update-icon-cache $pkgpath/share/icons/hicolor
	fi

	if [ "`grep "$pkgpath/share/applications" "$PKGFILE"`" != "" ];then
	 rm -f $pkgpath/share/applications/mimeinfo.cache
	 update-desktop-database $pkgpath/share/applications
	fi
	
	for libfld in $ldpaths
	 do
		if [ "`grep "$pkgpath/$libfld/gio/modules" "$PKGFILE"`" != "" ];then
		 gio-querymodules $pkgpath/$libfld/gio/modules
		fi
    done	
done

if [ "`grep '/share/fonts' "$PKGFILE"`" != "" ];then
 fc-cache -f
fi

if [ "`grep '/gconv/' "$PKGFILE" | grep "/lib"`" != "" ];then
 iconvconfig
fi

if [ "`grep '/gdk-pixbuf' "$PKGFILE" | grep "/lib"`" != "" ];then
 gdk-pixbuf-query-loaders --update-cache
fi

if [ "`grep '/pango/' "$PKGFILE" | grep "/lib"`" != "" ];then
 pango-querymodules --update-cache
fi

for gtkver in $GTKVERLIST
do
 if [ "`grep "/gtk-$gtkver" "$PKGFILE" | grep "/immodules" | grep "/lib"`" != "" ];then
  gtk-query-immodules-$gtkver --update-cache
 fi
done

if [ "`grep '/wine' "$PKGFILE"`" != "" ];then
 if [ "$(which xdg-wine)" != "" ] && [ "$(pidof xdg-wine)" == "" ]; then
  xdg-wine
 fi
fi

KVER="$(uname -r)"

if [ "`grep "/lib/modules/$KVER" $PKGFILE`" != "" ];then
 depmod -a
fi
	
   rm -f $D/$PKG

   kill $xPID
   
   MSG1="`eval_gettext \"Package '\\\${PKG}' was removed. Choose another...\"`"
   if [ "$FIXMENU" = "yes" ];then #101222
    fixmenus
    [ "`pidof jwm`" != "" ] && jwm -restart
    sleep 1
   fi
  else
   MSG1="`eval_gettext \"Package '\\\${PKG}' was not removed. Choose another...\"`"
  fi
  continue
 fi
 break
done
