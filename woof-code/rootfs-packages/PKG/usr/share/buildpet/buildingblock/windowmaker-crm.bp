#!/bin/sh

PKG_NAME="windowmaker-crm"
PKG_VER="git$(date +%d%m%Y)"
PKG_REV="4"
PKG_DESC="Window manager"
PKG_CAT="BuildingBlock"
PKG_DEPS="+wmclock,+wmsystemtray,+perl"

download() {
	# download the sources
	[ -f $PKG_NAME-$PKG_VER.tar.xz ] && return 0
	git clone --depth 1 git://repo.or.cz/wmaker-crm.git $PKG_NAME-$PKG_VER
	[ $? -ne 0 ] && return 1
	
	# create a sources tarball
	tar --exclude-vcs -c $PKG_NAME-$PKG_VER | xz -9 > $PKG_NAME-$PKG_VER.tar.xz
	[ $? -ne 0 ] && return 1
	rm -rf $PKG_NAME-$PKG_VER
	[ $? -ne 0 ] && return 1
	
	return 0
}

build() {
	# extract the sources
	tar -xJvf $PKG_NAME-$PKG_VER.tar.xz 
	[ $? -ne 0 ] && return 1
	
	cd $PKG_NAME-$PKG_VER

	# taken from the Arch Linux PKGBUILD
	export LINGUAS="`ls po/*.po | sed 's:po/\(.*\)\.po$:\1:'`"
	
	# configure the package
	./autogen.sh
	[ $? -ne 0 ] && return 1

	./configure --build=$BUILD_TARGET \
	            --prefix=${BASE_PATH_PREFIX} \
	            --libexecdir=${BASE_PATH_PREFIX}/lib$LIBDIR_SUFFIX/WindowMaker \
	            --sysconfdir=/etc \
	            --localstatedir=/var \
	            --mandir=${BASE_PATH_PREFIX}/share/man \
	            --disable-debug \
	            --disable-static \
	            --enable-shared \
	            --with-nlsdir=${BASE_PATH_PREFIX}/share/locale \
	            --with-gnustepdir=${BASE_PATH_PREFIX}/lib$LIBDIR_SUFFIX/GNUstep \
	            --enable-modelock \
	            --enable-usermenu \
	            --enable-xrandr \
	            --enable-xinerama \
	            --enable-locale \
	            --disable-kde \
	            --disable-gnome
	[ $? -ne 0 ] && return 1

	# build the package
	make -j $BUILD_THREADS
	[ $? -ne 0 ] && return 1

	return 0
}

package() {	
	# install the package
	make DESTDIR=$INSTALL_DIR install
	[ $? -ne 0 ] && return 1

	# install the license
	install -m644 -D COPYING.WTFPL $INSTALL_DIR${BASE_PATH_PREFIX}/share/doc/legal/$PKG_NAME/COPYING.WTFPL
	[ $? -ne 0 ] && return 1
	
	# remove wmaker.inst - it ruins ~/.xinitrc
	rm -f $INSTALL_DIR${BASE_PATH_PREFIX}/bin/wmaker.inst
	[ $? -ne 0 ] && return 1
	
	# create backwards-compatibility symlinks
	mkdir -p $INSTALL_DIR${BASE_PATH_PREFIX}/local/share
	[ $? -ne 0 ] && return 1
	ln -s ../lib$LIBDIR_SUFFIX/GNUstep $INSTALL_DIR${BASE_PATH_PREFIX}/local/GNUstep
	[ $? -ne 0 ] && return 1
	ln -s ../../share/WindowMaker $INSTALL_DIR${BASE_PATH_PREFIX}/local/share/WindowMaker
	[ $? -ne 0 ] && return 1
		
	# install the menu generator	
cat <<SCRIPT_END > $INSTALL_DIR${BASE_PATH_PREFIX}/bin/wm-xdgmenu
#!/bin/sh

generate_menu() {
cat <<END
("Applications",
 ("Info",
  ("Info Panel", INFO_PANEL),
  ("Legal", LEGAL_PANEL),
  ("Release Notes", EXEC, "puppyhelp")
 ),
 ("Run...", SHEXEC, "%a(Run,Type command to run:)"),
 ("Workspaces", WORKSPACE_MENU),
 ("Applications",
END
 
perl -x "\$0"

cat <<END
 ),
 ("Utils",
  ("Magnify", EXEC, "wmagnify")
 ),
 ("Selection",
  ("Copy", SHEXEC, "echo '%s' | wxcopy"),
  ("Navigate", EXEC, "defaultbrowser %s"),
  ("Search in Manual", EXEC, "man %s")
 ),
 ("Commands",
  ("Hide Others", HIDE_OTHERS),
  ("Show All", SHOW_ALL),
  ("Arrange Icons", ARRANGE_ICONS),
  ("Refresh", REFRESH),
  ("Lock", EXEC, "xlock -allowroot -usefirst")
 ),
 ("Appearance",
  ("Themes", OPEN_MENU, "-noext \${BASE_PATH_PREFIX}/local/share/WindowMaker/Themes \$HOME/GNUstep/Library/WindowMaker/Themes WITH setstyle"),
  ("Styles", OPEN_MENU, "-noext \${BASE_PATH_PREFIX}/local/share/WindowMaker/Styles \$HOME/GNUstep/Library/WindowMaker/Styles WITH setstyle"),
  ("Icon Sets", OPEN_MENU, "-noext \${BASE_PATH_PREFIX}/local/share/WindowMaker/IconSets \$HOME/GNUstep/Library/WindowMaker/IconSets WITH seticons"),
  ("Background",
   ("Solid",
	("Black", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, black)'"),
	("Blue",  EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#505075\")'"),
	("Indigo", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#243e6c\")'"),
	("Bluemarine", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#224477\")'"),
	("Purple", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#554466\")'"),
	("Wheat", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, wheat4)'"),
	("Dark Gray", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#333340\")'"),
	("Wine", EXEC, "wdwrite WindowMaker WorkspaceBack '(solid, \"#400020\")'")
   ),
   ("Gradient",
	("Sunset", EXEC, "wdwrite WindowMaker WorkspaceBack '(mvgradient, deepskyblue4, black, deepskyblue4, tomato4)'"),
	("Sky", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, blue4, white)'"),
	("Blue Shades",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#7080a5\", \"#101020\")'"),
	("Indigo Shades", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#746ebc\", \"#242e4c\")'"),
	("Purple Shades", EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#654c66\", \"#151426\")'"),
	("Wheat Shades",  EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#a09060\", \"#302010\")'"),
	("Grey Shades",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#636380\", \"#131318\")'"),
	("Wine Shades",   EXEC, "wdwrite WindowMaker WorkspaceBack '(vgradient, \"#600040\", \"#180010\")'")
   ),
   ("Images", OPEN_MENU, "-noext ${BASE_PATH_PREFIX}/share/backgrounds ${BASE_PATH_PREFIX}/local/share/WindowMaker/Backgrounds \$HOME/GNUstep/Library/WindowMaker/Backgrounds WITH wmsetbg -u -t")
   ),
   ("Save Theme", SHEXEC, "getstyle -t \$HOME/GNUstep/Library/WindowMaker/Themes/\"%a(Theme name)\""),
   ("Save IconSet", SHEXEC, "geticonset \$HOME/GNUstep/Library/WindowMaker/IconSets/\"%a(IconSet name)\""),
   ("Preferences Utility", EXEC, "\${BASE_PATH_PREFIX}/local/GNUstep/Applications/WPrefs.app/WPrefs")
   ),
   ("Session",
    ("Save Session", SAVE_SESSION),
    ("Clear Session", CLEAR_SESSION),
    ("Restart Window Maker", RESTART),
    ("Restart X server", EXEC, "restartwm"),
    ("Exit Window Maker", EXIT),
    ("Reboot", EXEC, "wmreboot"),
    ("Power off", EXEC, "wmpoweroff")
   )
)
END
}

generate_menu > ~/GNUstep/Defaults/WMRootMenu
exit

#!/usr/bin/perl

# the directory containing the .desktop files
\$DESKTOP_DIR = "${BASE_PATH_PREFIX}/share/applications";

# the separator between a field and its value in a .desktop file
\$SEPARATOR = "=";

# the relevant fields
\$NAME_FIELD = "Name";
\$CATEGORIES_FIELD = "Categories";
\$COMMAND_FIELD = "Exec";

# the menu categories; each begins with the submenu name and contains a
# list of categories that match the category, prefix, delimeted and 
# terminated by a ";"
@CATEGORIES = ( ";Desktop;X-Desktop;DesktopSettings;Screensaver;Accessibility;Countryn;X-DesktopCountry;Applets;X-DesktopApplets;",
";System;Monitor;Security;HardwareSettings;Core;X-SystemMemory;X-SystemSchedule;",
";Setup;X-SetupEntry;PackageManager;X-SetupWizard;X-SetupUtility;",
";Utility;Viewer;Development;Building;Debugger;IDE;Profiling;Translation;GUIDesigner;Archiving;TerminalEmulator;Shell;",
";Filesystem;FileSystem;FileManager;X-FilesystemMount;X-FilesystemUtility;X-FilesystemFind;",
";Graphic;Graphics;2DGraphics;3DGraphics;Photography;Presentation;Chart;FlowChart;VectorGraphics;RasterGraphics;X-GraphicUtility;",
";Document;Office;X-Document;WordProcessor;WebDevelopment;TextEditor;X-DocumentUtility;Dictionary;",
";Business;X-Calculate;Finance;Spreadsheet;ProjectManagement;Calculator;X-CalculateUtility;",
";Personal;X-Personal;Calendar;ContactManagement;X-PersonalUtility;",
";Network;Dialup;Network;HamRadio;RemoteAccess;",
";Internet;X-Internet;WebBrowser;Email;News;InstantMessaging;Telephony;IRCClient;FileTransfer;P2P;",
";Multimedia;AudioVideo;Video;Player;AudioVideoEditing;Recorder;Music;Audio;Midi;Mixer;Sequencer;Tuner;Video;TV;DiskBurning;",
";Fun;Game;Amusement;ActionGame;AdventureGame;ArcadeGame;BlocksGame;BoardGame;CardGame;KidsGame;LogicGame;RolePlaying;Simulation;SportsGame;StrategyGame;" );

sub get_category_name {
	@sub_categories = split(";", \$_[0]);
	return \$sub_categories[1];
}

# determines whether a 
sub is_in_category {
	(\$categories, \$haystack) = @_;
	# split the categories field and check each category - if it exists
	# in the submenu, return 1
	foreach my \$needle (split(";", \$categories)) {	
		if (-1 != index(\$haystack, ";".\$needle.";")) {
			return 1;
		}
	}
	return 0;
}

# returns the field in a line of a .desktop file
sub get_field {
	return substr(\$_[0], 0, index(\$_[0], \$SEPARATOR));
}

# returns the value in a line of a .desktop file
sub get_value {
	return substr(\$_[0], 1 + index(\$_[0], \$SEPARATOR));
}

# parses a single .desktop file into a record
sub parse_file { 
	# open the file
	open(HANDLE, \$_[0]) || die("Error: could not open \$_[0].");
	\$is_first = 1;
	\$package = {};
	
	while (<HANDLE>) {
		# skip the first line
		if (\$is_first) {
			\$is_first = 0;
			next;
		}
				
		# parse the file			
		chomp;
		\$package -> { get_field(\$_) } = get_value(\$_);
	}
	close(HANDLE);
	
	# find the right category and filter its name
	for my \$category (reverse(@CATEGORIES)) {
		if (1 == is_in_category(\$package -> { \$CATEGORIES_FIELD }, 
		                        \$category)) {
			\$package -> { "category" } = get_category_name(\$category);
			last;
		}
	}
	
	return \$package;
}

sub package_to_entry {
	# escape the command line	
	\$_[0] -> { \$COMMAND_FIELD } =~ s/\"/\\\"/g;
	
	return "(\"".\$_[0] -> { \$NAME_FIELD }."\", EXEC, \"".\$menu_entry -> { \$COMMAND_FIELD }."\")";
	
}

@menu_entries = ();

# list the .desktop files to parse
@desktop_files = glob "\$DESKTOP_DIR/*.desktop";

# parse each file
foreach \$desktop_file (@desktop_files) {
	push(@menu_entries, parse_file(\$desktop_file));
}

# initialize an array containing the textual representation of all 
# sub-menus
@menu_categories_text = ();

foreach my \$menu_category (@CATEGORIES) {
	# get the category name
	\$category_name = get_category_name(\$menu_category);
	
	# initialize the list of packages in the category
	@category_entries = ();
	
	# add all the menu entries that belong to the category to the list
	for \$menu_entry (@menu_entries) {
		if (\$category_name eq \$menu_entry -> { "category" }) {
			push(@category_entries, package_to_entry(\$menu_entry))
		} 
	}

	# turn the menu entries into a string
	if (0 < @category_entries) {
		\$category_text = "  (\n    ".\$category_name.",\n    ".join(",\n    ", @category_entries)."\n  )";
		# add the menu entry text to the array
		push(@menu_categories_text, \$category_text);
	} else {
		\$category_text = "";
	}
}

# print the applications menu
print join(",\n", @menu_categories_text);
SCRIPT_END
	[ $? -ne 0 ] && return 1
	chmod 755 $INSTALL_DIR${BASE_PATH_PREFIX}/bin/wm-xdgmenu
	[ $? -ne 0 ] && return 1
	
	# make the menu generator run on every boot
	mkdir -p $INSTALL_DIR/root/Startup
	[ $? -ne 0 ] && return 1
	ln -s ../..${BASE_PATH_PREFIX}/bin/wm-xdgmenu $INSTALL_DIR/root/Startup
	[ $? -ne 0 ] && return 1
		
	# create a symlink to WPrefs to fix the menu entry
	ln -s ../lib$LIBDIR_SUFFIX/GNUstep/Applications/WPrefs.app/WPrefs $INSTALL_DIR${BASE_PATH_PREFIX}/bin/WPrefs
	[ $? -ne 0 ] && return 1
	
	# create a default configuration directory
	mkdir -p $INSTALL_DIR/root/GNUstep/Library/WindowMaker $INSTALL_DIR/root/GNUstep/Defaults
	[ $? -ne 0 ] && return 1
	cp $INSTALL_DIR/etc/WindowMaker/* $INSTALL_DIR/root/GNUstep/Defaults
	[ $? -ne 0 ] && return 1
	
	for i in Backgrounds CachedPixmaps Icons IconSets Pixmaps Styles Themes WPrefs
	do
		mkdir $INSTALL_DIR/root/GNUstep/Library/WindowMaker/$i
		[ $? -ne 0 ] && return 1
	done
	
	for i in autostart exitscript
	do
		install -m755 -D $INSTALL_DIR${BASE_PATH_PREFIX}/share/WindowMaker/$i.sh $INSTALL_DIR/root/GNUstep/Library/WindowMaker/$i
		[ $? -ne 0 ] && return1 
	done

	# install a default configuration
	echo "{
  Dock = {
    Lowered = No;
    Applications600 = (
      {
        Name = Logo.WMDock;
        Lock = No;
        AutoLaunch = No;
        Command = \"-\";
        Position = \"0,0\";
        Forced = No;
        BuggyApplication = No;
      },
      {
        Name = xterm.XTerm;
        Lock = No;
        AutoLaunch = No;
        Command = xterm;
        Position = \"0,1\";
        Forced = No;
        BuggyApplication = No;
      },
      {
        Name = groupLeader.WPrefs;
        Lock = Yes;
        AutoLaunch = No;
        Command = \"${BASE_PATH_PREFIX}/local/GNUstep/Applications/WPrefs.app/WPrefs\";
        Position = \"0,2\";
        Forced = No;
        BuggyApplication = No;
      },
      {
        PasteCommand = \"wmclock %s\";
        Name = wmclock.WMClock;
        Lock = Yes;
        AutoLaunch = Yes;
        Command = wmclock;
        Position = \"0,3\";
        Forced = No;
        BuggyApplication = No;
      },
      {
        PasteCommand = \"wmsystemtray %s\";
        Name = wmsystemtray0.wmsystemtray;
        Lock = Yes;
        AutoLaunch = Yes;
        Command = wmsystemtray;
        Position = \"0,4\";
        Forced = No;
        BuggyApplication = No;
      }
    );
    Position = \"-64,0\";
    Applications = (
      {
        Name = Logo.WMDock;
        Lock = No;
        AutoLaunch = No;
        Command = \"-\";
        Position = \"0,0\";
        Forced = No;
        BuggyApplication = No;
      },
      {
        Name = xterm.XTerm;
        Lock = No;
        AutoLaunch = No;
        Command = rxvt;
        Position = \"0,1\";
        Forced = No;
        BuggyApplication = No;
      },
      {
        Name = groupLeader.WPrefs;
        Lock = Yes;
        AutoLaunch = No;
        Command = \"${BASE_PATH_PREFIX}/local/GNUstep/Applications/WPrefs.app/WPrefs\";
        Position = \"0,2\";
        Forced = No;
        BuggyApplication = No;
      },
      {
        PasteCommand = \"wmsystemtray %s\";
        Name = wmsystemtray0.wmsystemtray;
        Lock = Yes;
        AutoLaunch = Yes;
        Command = wmsystemtray;
        Position = \"0,5\";
        Forced = No;
        BuggyApplication = No;
      },
      {
        PasteCommand = \"wmclock %s\";
        Name = wmclock.WMClock;
        Lock = Yes;
        AutoLaunch = Yes;
        Command = wmclock;
        Position = \"0,3\";
        Forced = No;
        BuggyApplication = No;
      }
    );
  };
  Clip = {
    Command = \"-\";
    Name = Logo.WMClip;
    AutoLaunch = No;
    StartHidden = No;
    StartMiniaturized = No;
    Forced = No;
    Position = \"0,0\";
    DropCommand = \"wmsetbg -u -t %d\";
  };
  Workspaces = (
    {
      Name = \"Main\";
      Clip = {
        Applications = ();
        Lowered = Yes;
        Collapsed = No;
        AutoAttractIcons = No;
        KeepAttracted = No;
      };
    }
  );
}" > $INSTALL_DIR/root/GNUstep/Defaults/WMState
	[ $? -ne 0 ] && return 1
	chmod 644 $INSTALL_DIR/root/GNUstep/Defaults/WMState
	[ $? -ne 0 ] && return 1

	# add the post-install script
	echo '#!/bin/sh

# make fixmenus refresh the Window Maker menu
echo "[ \`which wmaker\` ] && wm-xdgmenu" >> ./usr/sbin/fixmenus

echo "Setting WindowMaker as the default window manager"
echo wmaker > ./etc/windowmanager' > $INSTALL_DIR/pinstall.sh
	[ $? -ne 0 ] && return 1
	chmod 755 $INSTALL_DIR/pinstall.sh
	[ $? -ne 0 ] && Return 1
	
	return 0
}
