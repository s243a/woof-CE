#!/bin/sh

PKG_NAME="openbox"
PKG_VER="3.5.0"
PKG_REV="1"
PKG_DESC="Window manager"
PKG_CAT="BuildingBlock"
PKG_DEPS="+imlib2"

download() {
	# download the sources
	[ -f $PKG_NAME-$PKG_VER.tar.gz ] && return 0
	wget --no-check-certificate http://openbox.org/dist/openbox/$PKG_NAME-$PKG_VER.tar.gz
	[ $? -ne 0 ] && return 1
	return 0
}

build() {
	# extract the sources
	tar -xzvf $PKG_NAME-$PKG_VER.tar.gz
	[ $? -ne 0 ] && return 1
	
	cd $PKG_NAME-$PKG_VER

	# configure the package
	./configure $BASE_CONFIGURE_ARGS \
	            --prefix=${BASE_PATH_PREFIX} \
	            --disable-startup-notification \
	            --enable-imlib2 \
	            --disable-session-management
	[ $? -ne 0 ] && return 1

	# build the package
	make -j $BUILD_THREADS
	[ $? -ne 0 ] && return 1

	return 0
}

package() {	
	# install the package
	make DESTDIR=$INSTALL_DIR install
	[ $? -ne 0 ] && return 1

	# remove unneded executables
	for i in gdm-control gnome-panel-control openbox-gnome-session openbox-kde-session openbox-session
	do
		rm -f $INSTALL_DIR${BASE_PATH_PREFIX}/bin/$i
		[ $? -ne 0 ] && return 1
	done

	# remove all themes
	for i in $INSTALL_DIR${BASE_PATH_PREFIX}/share/themes/*
	do
		case "$i" in
			*/Clearlooks)
				;;
			*)
				rm -rf "$i"
				[ $? -ne 0 ] && return 1
				;;
		esac
	done
	
	# remove an unneeded script
	rm -f $INSTALL_DIR${BASE_PATH_PREFIX}/lib$LIBDIR_SUFFIX/openbox/openbox-xdg-autostart
	[ $? -ne 0 ] && return 1
	
	# replace the autostart script
	echo '#!/bin/sh
	
. /etc/xdg/openbox/autostart' > $INSTALL_DIR${BASE_PATH_PREFIX}/lib$LIBDIR_SUFFIX/openbox/openbox-autostart
	[ $? -ne 0 ] && return 1
	chmod 755 $INSTALL_DIR${BASE_PATH_PREFIX}/lib$LIBDIR_SUFFIX/openbox/openbox-autostart
	[ $? -ne 0 ] && return 1

	# add the post-install script
	echo '#!/bin/sh
echo openbox > etc/windowmanager
echo "[ \`which openbox\` ] && ob-xdgmenu" >> usr/sbin/fixmenus' > $INSTALL_DIR/pinstall.sh
	[ $? -ne 0 ] && return 0
	chmod 755 $INSTALL_DIR/pinstall.sh

	# add a menu generator
cat <<SCRIPT_END > $INSTALL_DIR${BASE_PATH_PREFIX}/bin/ob-xdgmenu
#!/bin/sh

generate_menu() {
cat <<END
<?xml version="1.0" encoding="UTF-8"?>
<openbox_menu xmlns="http://openbox.org/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://openbox.org/ file://${BASE_PATH_PREFIX}/X11R6/share/openbox/menu.xsd">
	<menu id="root-menu" label="openbox3">
		<separator label="Applications"/>
END
 
perl -x "\$0"

cat <<END
		<separator label="System"/>
		<menu id="Openbox" label="Openbox">
			<item label="Reconfigure"><action name="Reconfigure" /></item>
			<item label="Restart"><action name="Restart" /></item>
			<item label="Exit"><action name="Exit"><prompt>yes</prompt></action></item>
		</menu>
		<separator/>
		<menu id="Shutdown" label="Exit">
			<item label="Power off"><action name="Execute"><execute>wmpoweroff</execute></action></item>
			<item label="Reboot"><action name="Execute"><execute>wmreboot</execute></action></item>
		</menu>
	</menu>
</openbox_menu>
END
}

generate_menu > /etc/xdg/openbox/menu.xml
openbox --reconfigure > /dev/null 2>&1
exit

#!${BASE_PATH_PREFIX}/bin/perl

# the directory containing the .desktop files
\$DESKTOP_DIR = "${BASE_PATH_PREFIX}/share/applications";

# the separator between a field and its value in a .desktop file
\$SEPARATOR = "=";

# the relevant fields
\$NAME_FIELD = "Name";
\$CATEGORIES_FIELD = "Categories";
\$COMMAND_FIELD = "Exec";

# the menu categories; each begins with the submenu name and contains a
# list of categories that match the category, prefix, delimeted and 
# terminated by a ";"
@CATEGORIES = ( ";Desktop;X-Desktop;DesktopSettings;Screensaver;Accessibility;Countryn;X-DesktopCountry;Applets;X-DesktopApplets;",
";System;Monitor;Security;HardwareSettings;Core;X-SystemMemory;X-SystemSchedule;",
";Setup;X-SetupEntry;PackageManager;X-SetupWizard;X-SetupUtility;",
";Utility;Viewer;Development;Building;Debugger;IDE;Profiling;Translation;GUIDesigner;Archiving;TerminalEmulator;Shell;",
";Filesystem;FileSystem;FileManager;X-FilesystemMount;X-FilesystemUtility;X-FilesystemFind;",
";Graphic;Graphics;2DGraphics;3DGraphics;Photography;Presentation;Chart;FlowChart;VectorGraphics;RasterGraphics;X-GraphicUtility;",
";Document;Office;X-Document;WordProcessor;WebDevelopment;TextEditor;X-DocumentUtility;Dictionary;",
";Business;X-Calculate;Finance;Spreadsheet;ProjectManagement;Calculator;X-CalculateUtility;",
";Personal;X-Personal;Calendar;ContactManagement;X-PersonalUtility;",
";Network;Dialup;Network;HamRadio;RemoteAccess;",
";Internet;X-Internet;WebBrowser;Email;News;InstantMessaging;Telephony;IRCClient;FileTransfer;P2P;",
";Multimedia;AudioVideo;Video;Player;AudioVideoEditing;Recorder;Music;Audio;Midi;Mixer;Sequencer;Tuner;Video;TV;DiskBurning;",
";Fun;Game;Amusement;ActionGame;AdventureGame;ArcadeGame;BlocksGame;BoardGame;CardGame;KidsGame;LogicGame;RolePlaying;Simulation;SportsGame;StrategyGame;" );

sub get_category_name {
	@sub_categories = split(";", \$_[0]);
	return \$sub_categories[1];
}

# determines whether a 
sub is_in_category {
	(\$categories, \$haystack) = @_;
	# split the categories field and check each category - if it exists
	# in the submenu, return 1
	foreach my \$needle (split(";", \$categories)) {	
		if (-1 != index(\$haystack, ";".\$needle.";")) {
			return 1;
		}
	}
	return 0;
}

# returns the field in a line of a .desktop file
sub get_field {
	return substr(\$_[0], 0, index(\$_[0], \$SEPARATOR));
}

# returns the value in a line of a .desktop file
sub get_value {
	return substr(\$_[0], 1 + index(\$_[0], \$SEPARATOR));
}

# parses a single .desktop file into a record
sub parse_file { 
	# open the file
	open(HANDLE, \$_[0]) || die("Error: could not open \$_[0].");
	\$is_first = 1;
	\$package = {};
	
	while (<HANDLE>) {
		# skip the first line
		if (\$is_first) {
			\$is_first = 0;
			next;
		}
				
		# parse the file			
		chomp;
		\$package -> { get_field(\$_) } = get_value(\$_);
	}
	close(HANDLE);
	
	# find the right category and filter its name
	for my \$category (reverse(@CATEGORIES)) {
		if (1 == is_in_category(\$package -> { \$CATEGORIES_FIELD }, 
		                        \$category)) {
			\$package -> { "category" } = get_category_name(\$category);
			last;
		}
	}
	
	return \$package;
}

sub package_to_entry {
	# escape the command line	
	\$_[0] -> { \$COMMAND_FIELD } =~ s/\"/\\\"/g;
	
	return "<item label=\"".\$_[0] -> { \$NAME_FIELD }."\"><action name=\"Execute\"><execute>".\$menu_entry -> { \$COMMAND_FIELD }."</execute></action></item>";
	
}

@menu_entries = ();

# list the .desktop files to parse
@desktop_files = glob "\$DESKTOP_DIR/*.desktop";

# parse each file
foreach \$desktop_file (@desktop_files) {
	push(@menu_entries, parse_file(\$desktop_file));
}

# initialize an array containing the textual representation of all 
# sub-menus
@menu_categories_text = ();

foreach my \$menu_category (@CATEGORIES) {
	# get the category name
	\$category_name = get_category_name(\$menu_category);
	
	# initialize the list of packages in the category
	@category_entries = ();
	
	# add all the menu entries that belong to the category to the list
	for \$menu_entry (@menu_entries) {
		if (\$category_name eq \$menu_entry -> { "category" }) {
			push(@category_entries, package_to_entry(\$menu_entry))
		} 
	}

	# turn the menu entries into a string
	if (0 < @category_entries) {
		\$category_text = "<menu id=\"".\$category_name."\" label=\"".\$category_name."\">\n\t".join("\n\t", @category_entries)."\n</menu>";
		# add the menu entry text to the array
		push(@menu_categories_text, \$category_text);
	} else {
		\$category_text = "";
	}
}

# print the applications menu
print "\t\t".join("\n\t\t", split("\n", join("\n", @menu_categories_text)))."\n";
SCRIPT_END
	[ $? -ne 0 ] && return 1
	chmod 755 $INSTALL_DIR${BASE_PATH_PREFIX}/bin/ob-xdgmenu
	[ $? -ne 0 ] && return 1
	
	return 0
}
