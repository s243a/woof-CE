#!/bin/sh

PKG_NAME="bash"
PKG_VER="4.2"
#for Wary use version 4.0
PKG_REV="1"
PKG_DESC="Command-line shell"
PKG_CAT="BuildingBlock"
PKG_DEPS=""

# the patch version
PATCH_VER="10"

get_patch_names() {
	for i in $(seq 1 $PATCH_VER)
	do
		# determine the patch name
		case $i in
			[1-9])
				echo "$PKG_NAME$(echo $PKG_VER | sed s/'\.'//g)-00$i"
				;;
			[1-9][0-9])
				echo "$PKG_NAME$(echo $PKG_VER | sed s/'\.'//g)-0$i"
				;;
		esac
	done
}

download() {
	# download the sources
	if [ ! -f $PKG_NAME-$PKG_VER.tar.gz ]
	then
		wget ftp://ftp.gnu.org/gnu/$PKG_NAME/$PKG_NAME-$PKG_VER.tar.gz
		[ $? -ne 0 ] && return 1
	fi
	
	# download all patches
	for i in $(get_patch_names)
	do
		[ -f $i ] && continue				
		wget ftp://ftp.gnu.org/gnu/$PKG_NAME/$PKG_NAME-$PKG_VER-patches/$i
		[ $? -ne 0 ] && return 1
	done
	return 0
}

build() {
	# extract the sources
	tar -xzvf $PKG_NAME-$PKG_VER.tar.gz
	[ $? -ne 0 ] && return 1

	cd $PKG_NAME-$PKG_VER

	# apply all patches
	for i in $(get_patch_names)
	do
		patch -p0 < ../$i		
		[ $? -ne 0 ] && return 1
	done

	# configure the package
	./configure $BASE_CONFIGURE_ARGS \
	            --prefix=${BASE_PATH_PREFIX} \
	            --bindir=/bin \
	            --disable-debugger \
	            --disable-help-builtin \
	            --enable-multibyte \
	            --disable-restricted \
	            --enable-single-help-strings \
	            --disable-mem-scramble \
	            --disable-profiling \
	            --disable-static-link \
	            --without-afs \
	            --without-bash-malloc \
	            --with-curses \
	            --with-installed-readline
	[ $? -ne 0 ] && return 1

	# build the package
	make -j $BUILD_THREADS
	[ $? -ne 0 ] && return 1

	return 0
}

package() {	
	# install the package
	make DESTDIR=$INSTALL_DIR install
	[ $? -ne 0 ] && return 1
	
	# add the post-install script
	echo '#!/bin/sh

[ -e ./bin/sh ] && exit 0

echo "Setting Bash as the default shell"
ln -s bash ./bin/sh' > $INSTALL_DIR/pinstall.sh
	[ $? -ne 0 ] && return 1
	chmod 755 $INSTALL_DIR/pinstall.sh
	[ $? -ne 0 ] && return 1
	
	return 0
}
